//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApplicationClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @return Success
   */
  getArtist(artistId: string): Promise<Artist> {
    let url_ = this.baseUrl + "/api/Artist/GetArtist?";
    if (artistId === undefined || artistId === null) throw new Error("The parameter 'artistId' must be defined and cannot be null.");
    else url_ += "artistId=" + encodeURIComponent("" + artistId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetArtist(_response);
    });
  }

  protected processGetArtist(response: Response): Promise<Artist> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Artist.fromJS(resultData200);
        return result200;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Artist>(null as any);
  }

  /**
   * @return Success
   */
  getArtists(artistIds: string[]): Promise<Artist[]> {
    let url_ = this.baseUrl + "/api/Artist/GetArtists?";
    if (artistIds === undefined || artistIds === null) throw new Error("The parameter 'artistIds' must be defined and cannot be null.");
    else
      artistIds &&
        artistIds.forEach((item) => {
          url_ += "artistIds=" + encodeURIComponent("" + item) + "&";
        });
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetArtists(_response);
    });
  }

  protected processGetArtists(response: Response): Promise<Artist[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Artist.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Artist[]>(null as any);
  }

  /**
   * @return Success
   */
  getAllArtists(): Promise<Artist[]> {
    let url_ = this.baseUrl + "/api/Artist/GetAllArtists";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAllArtists(_response);
    });
  }

  protected processGetAllArtists(response: Response): Promise<Artist[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Artist.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Artist[]>(null as any);
  }

  /**
   * @param name (optional)
   * @param enabled (optional)
   * @return Success
   */
  getPagedArtists(pageSize: number, pageIndex: number, name: string | undefined, enabled: boolean | undefined): Promise<ArtistPageResponse> {
    let url_ = this.baseUrl + "/api/Artist/GetPagedArtists?";
    if (pageSize === undefined || pageSize === null) throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
    else url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (pageIndex === undefined || pageIndex === null) throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
    else url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (name === null) throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined) url_ += "name=" + encodeURIComponent("" + name) + "&";
    if (enabled === null) throw new Error("The parameter 'enabled' cannot be null.");
    else if (enabled !== undefined) url_ += "enabled=" + encodeURIComponent("" + enabled) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetPagedArtists(_response);
    });
  }

  protected processGetPagedArtists(response: Response): Promise<ArtistPageResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ArtistPageResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ArtistPageResponse>(null as any);
  }

  /**
   * @param includeReverseRelationships (optional)
   * @return Success
   */
  getArtistRelationships(artistId: string, includeReverseRelationships: boolean | undefined): Promise<ArtistRelationship[]> {
    let url_ = this.baseUrl + "/api/Artist/GetArtistRelationships?";
    if (artistId === undefined || artistId === null) throw new Error("The parameter 'artistId' must be defined and cannot be null.");
    else url_ += "artistId=" + encodeURIComponent("" + artistId) + "&";
    if (includeReverseRelationships === null) throw new Error("The parameter 'includeReverseRelationships' cannot be null.");
    else if (includeReverseRelationships !== undefined) url_ += "includeReverseRelationships=" + encodeURIComponent("" + includeReverseRelationships) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetArtistRelationships(_response);
    });
  }

  protected processGetArtistRelationships(response: Response): Promise<ArtistRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ArtistRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ArtistRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  createArtist(body: Artist): Promise<Artist> {
    let url_ = this.baseUrl + "/api/Artist/CreateArtist";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateArtist(_response);
    });
  }

  protected processCreateArtist(response: Response): Promise<Artist> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Artist.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Artist>(null as any);
  }

  /**
   * @return Success
   */
  updateArtist(body: Artist): Promise<void> {
    let url_ = this.baseUrl + "/api/Artist/UpdateArtist";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateArtist(_response);
    });
  }

  protected processUpdateArtist(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  deleteArtist(artistId: string): Promise<void> {
    let url_ = this.baseUrl + "/api/Artist/DeleteArtist?";
    if (artistId === undefined || artistId === null) throw new Error("The parameter 'artistId' must be defined and cannot be null.");
    else url_ += "artistId=" + encodeURIComponent("" + artistId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeleteArtist(_response);
    });
  }

  protected processDeleteArtist(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getGenre(genreId: string): Promise<Genre> {
    let url_ = this.baseUrl + "/api/Genre/GetGenre?";
    if (genreId === undefined || genreId === null) throw new Error("The parameter 'genreId' must be defined and cannot be null.");
    else url_ += "genreId=" + encodeURIComponent("" + genreId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetGenre(_response);
    });
  }

  protected processGetGenre(response: Response): Promise<Genre> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Genre.fromJS(resultData200);
        return result200;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Genre>(null as any);
  }

  /**
   * @return Success
   */
  getGenres(genreIds: string[]): Promise<Genre[]> {
    let url_ = this.baseUrl + "/api/Genre/GetGenres?";
    if (genreIds === undefined || genreIds === null) throw new Error("The parameter 'genreIds' must be defined and cannot be null.");
    else
      genreIds &&
        genreIds.forEach((item) => {
          url_ += "genreIds=" + encodeURIComponent("" + item) + "&";
        });
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetGenres(_response);
    });
  }

  protected processGetGenres(response: Response): Promise<Genre[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Genre.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Genre[]>(null as any);
  }

  /**
   * @return Success
   */
  getAllGenres(): Promise<Genre[]> {
    let url_ = this.baseUrl + "/api/Genre/GetAllGenres";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAllGenres(_response);
    });
  }

  protected processGetAllGenres(response: Response): Promise<Genre[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Genre.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Genre[]>(null as any);
  }

  /**
   * @param name (optional)
   * @param enabled (optional)
   * @return Success
   */
  getPagedGenres(pageSize: number, pageIndex: number, name: string | undefined, enabled: boolean | undefined): Promise<GenrePageResponse> {
    let url_ = this.baseUrl + "/api/Genre/GetPagedGenres?";
    if (pageSize === undefined || pageSize === null) throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
    else url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (pageIndex === undefined || pageIndex === null) throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
    else url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (name === null) throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined) url_ += "name=" + encodeURIComponent("" + name) + "&";
    if (enabled === null) throw new Error("The parameter 'enabled' cannot be null.");
    else if (enabled !== undefined) url_ += "enabled=" + encodeURIComponent("" + enabled) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetPagedGenres(_response);
    });
  }

  protected processGetPagedGenres(response: Response): Promise<GenrePageResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GenrePageResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<GenrePageResponse>(null as any);
  }

  /**
   * @param includeReverseRelationships (optional)
   * @return Success
   */
  getGenreRelationships(genreId: string, includeReverseRelationships: boolean | undefined): Promise<GenreRelationship[]> {
    let url_ = this.baseUrl + "/api/Genre/GetGenreRelationships?";
    if (genreId === undefined || genreId === null) throw new Error("The parameter 'genreId' must be defined and cannot be null.");
    else url_ += "genreId=" + encodeURIComponent("" + genreId) + "&";
    if (includeReverseRelationships === null) throw new Error("The parameter 'includeReverseRelationships' cannot be null.");
    else if (includeReverseRelationships !== undefined) url_ += "includeReverseRelationships=" + encodeURIComponent("" + includeReverseRelationships) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetGenreRelationships(_response);
    });
  }

  protected processGetGenreRelationships(response: Response): Promise<GenreRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(GenreRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<GenreRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  createGenre(body: Genre): Promise<Genre> {
    let url_ = this.baseUrl + "/api/Genre/CreateGenre";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateGenre(_response);
    });
  }

  protected processCreateGenre(response: Response): Promise<Genre> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Genre.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Genre>(null as any);
  }

  /**
   * @return Success
   */
  updateGenre(body: Genre): Promise<void> {
    let url_ = this.baseUrl + "/api/Genre/UpdateGenre";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateGenre(_response);
    });
  }

  protected processUpdateGenre(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  deleteGenre(genreId: string): Promise<void> {
    let url_ = this.baseUrl + "/api/Genre/DeleteGenre?";
    if (genreId === undefined || genreId === null) throw new Error("The parameter 'genreId' must be defined and cannot be null.");
    else url_ += "genreId=" + encodeURIComponent("" + genreId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeleteGenre(_response);
    });
  }

  protected processDeleteGenre(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  check(): Promise<void> {
    let url_ = this.baseUrl + "/api/Health/Check";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCheck(_response);
    });
  }

  protected processCheck(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getProduct(productId: string): Promise<Product> {
    let url_ = this.baseUrl + "/api/Product/GetProduct?";
    if (productId === undefined || productId === null) throw new Error("The parameter 'productId' must be defined and cannot be null.");
    else url_ += "productId=" + encodeURIComponent("" + productId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetProduct(_response);
    });
  }

  protected processGetProduct(response: Response): Promise<Product> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Product.fromJS(resultData200);
        return result200;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Product>(null as any);
  }

  /**
   * @return Success
   */
  getProducts(productIds: string[]): Promise<Product[]> {
    let url_ = this.baseUrl + "/api/Product/GetProducts?";
    if (productIds === undefined || productIds === null) throw new Error("The parameter 'productIds' must be defined and cannot be null.");
    else
      productIds &&
        productIds.forEach((item) => {
          url_ += "productIds=" + encodeURIComponent("" + item) + "&";
        });
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetProducts(_response);
    });
  }

  protected processGetProducts(response: Response): Promise<Product[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Product.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Product[]>(null as any);
  }

  /**
   * @return Success
   */
  getAllProducts(): Promise<Product[]> {
    let url_ = this.baseUrl + "/api/Product/GetAllProducts";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAllProducts(_response);
    });
  }

  protected processGetAllProducts(response: Response): Promise<Product[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Product.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Product[]>(null as any);
  }

  /**
   * @param title (optional)
   * @param enabled (optional)
   * @return Success
   */
  getPagedProducts(pageSize: number, pageIndex: number, title: string | undefined, enabled: boolean | undefined): Promise<ProductPageResponse> {
    let url_ = this.baseUrl + "/api/Product/GetPagedProducts?";
    if (pageSize === undefined || pageSize === null) throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
    else url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (pageIndex === undefined || pageIndex === null) throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
    else url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (title === null) throw new Error("The parameter 'title' cannot be null.");
    else if (title !== undefined) url_ += "title=" + encodeURIComponent("" + title) + "&";
    if (enabled === null) throw new Error("The parameter 'enabled' cannot be null.");
    else if (enabled !== undefined) url_ += "enabled=" + encodeURIComponent("" + enabled) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetPagedProducts(_response);
    });
  }

  protected processGetPagedProducts(response: Response): Promise<ProductPageResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductPageResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ProductPageResponse>(null as any);
  }

  /**
   * @param includeReverseRelationships (optional)
   * @return Success
   */
  getProductRelationships(productId: string, includeReverseRelationships: boolean | undefined): Promise<ProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Product/GetProductRelationships?";
    if (productId === undefined || productId === null) throw new Error("The parameter 'productId' must be defined and cannot be null.");
    else url_ += "productId=" + encodeURIComponent("" + productId) + "&";
    if (includeReverseRelationships === null) throw new Error("The parameter 'includeReverseRelationships' cannot be null.");
    else if (includeReverseRelationships !== undefined) url_ += "includeReverseRelationships=" + encodeURIComponent("" + includeReverseRelationships) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetProductRelationships(_response);
    });
  }

  protected processGetProductRelationships(response: Response): Promise<ProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  createProduct(body: Product): Promise<Product> {
    let url_ = this.baseUrl + "/api/Product/CreateProduct";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateProduct(_response);
    });
  }

  protected processCreateProduct(response: Response): Promise<Product> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Product.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Product>(null as any);
  }

  /**
   * @return Success
   */
  updateProduct(body: Product): Promise<void> {
    let url_ = this.baseUrl + "/api/Product/UpdateProduct";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateProduct(_response);
    });
  }

  protected processUpdateProduct(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  deleteProduct(productId: string): Promise<void> {
    let url_ = this.baseUrl + "/api/Product/DeleteProduct?";
    if (productId === undefined || productId === null) throw new Error("The parameter 'productId' must be defined and cannot be null.");
    else url_ += "productId=" + encodeURIComponent("" + productId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeleteProduct(_response);
    });
  }

  protected processDeleteProduct(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getRelease(releaseId: string): Promise<Release> {
    let url_ = this.baseUrl + "/api/Release/GetRelease?";
    if (releaseId === undefined || releaseId === null) throw new Error("The parameter 'releaseId' must be defined and cannot be null.");
    else url_ += "releaseId=" + encodeURIComponent("" + releaseId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetRelease(_response);
    });
  }

  protected processGetRelease(response: Response): Promise<Release> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Release.fromJS(resultData200);
        return result200;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Release>(null as any);
  }

  /**
   * @return Success
   */
  getReleases(releaseIds: string[]): Promise<Release[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleases?";
    if (releaseIds === undefined || releaseIds === null) throw new Error("The parameter 'releaseIds' must be defined and cannot be null.");
    else
      releaseIds &&
        releaseIds.forEach((item) => {
          url_ += "releaseIds=" + encodeURIComponent("" + item) + "&";
        });
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleases(_response);
    });
  }

  protected processGetReleases(response: Response): Promise<Release[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Release.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Release[]>(null as any);
  }

  /**
   * @return Success
   */
  getAllReleases(): Promise<Release[]> {
    let url_ = this.baseUrl + "/api/Release/GetAllReleases";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAllReleases(_response);
    });
  }

  protected processGetAllReleases(response: Response): Promise<Release[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Release.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Release[]>(null as any);
  }

  /**
   * @param title (optional)
   * @param enabled (optional)
   * @return Success
   */
  getPagedReleases(pageSize: number, pageIndex: number, title: string | undefined, enabled: boolean | undefined): Promise<ReleasePageResponse> {
    let url_ = this.baseUrl + "/api/Release/GetPagedReleases?";
    if (pageSize === undefined || pageSize === null) throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
    else url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (pageIndex === undefined || pageIndex === null) throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
    else url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (title === null) throw new Error("The parameter 'title' cannot be null.");
    else if (title !== undefined) url_ += "title=" + encodeURIComponent("" + title) + "&";
    if (enabled === null) throw new Error("The parameter 'enabled' cannot be null.");
    else if (enabled !== undefined) url_ += "enabled=" + encodeURIComponent("" + enabled) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetPagedReleases(_response);
    });
  }

  protected processGetPagedReleases(response: Response): Promise<ReleasePageResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ReleasePageResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleasePageResponse>(null as any);
  }

  /**
   * @param includeReverseRelationships (optional)
   * @return Success
   */
  getReleaseRelationships(releaseId: string, includeReverseRelationships: boolean | undefined): Promise<ReleaseRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseRelationships?";
    if (releaseId === undefined || releaseId === null) throw new Error("The parameter 'releaseId' must be defined and cannot be null.");
    else url_ += "releaseId=" + encodeURIComponent("" + releaseId) + "&";
    if (includeReverseRelationships === null) throw new Error("The parameter 'includeReverseRelationships' cannot be null.");
    else if (includeReverseRelationships !== undefined) url_ += "includeReverseRelationships=" + encodeURIComponent("" + includeReverseRelationships) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseRelationships(_response);
    });
  }

  protected processGetReleaseRelationships(response: Response): Promise<ReleaseRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseToProductRelationships(releaseId: string): Promise<ReleaseToProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseToProductRelationships?";
    if (releaseId === undefined || releaseId === null) throw new Error("The parameter 'releaseId' must be defined and cannot be null.");
    else url_ += "releaseId=" + encodeURIComponent("" + releaseId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseToProductRelationships(_response);
    });
  }

  protected processGetReleaseToProductRelationships(response: Response): Promise<ReleaseToProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseToProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseToProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseToProductRelationshipsByProduct(productId: string): Promise<ReleaseToProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseToProductRelationshipsByProduct?";
    if (productId === undefined || productId === null) throw new Error("The parameter 'productId' must be defined and cannot be null.");
    else url_ += "productId=" + encodeURIComponent("" + productId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseToProductRelationshipsByProduct(_response);
    });
  }

  protected processGetReleaseToProductRelationshipsByProduct(response: Response): Promise<ReleaseToProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseToProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseToProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseToReleaseGroupRelationships(releaseId: string): Promise<ReleaseToReleaseGroupRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseToReleaseGroupRelationships?";
    if (releaseId === undefined || releaseId === null) throw new Error("The parameter 'releaseId' must be defined and cannot be null.");
    else url_ += "releaseId=" + encodeURIComponent("" + releaseId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseToReleaseGroupRelationships(_response);
    });
  }

  protected processGetReleaseToReleaseGroupRelationships(response: Response): Promise<ReleaseToReleaseGroupRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseToReleaseGroupRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseToReleaseGroupRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseToReleaseGroupRelationshipsByReleaseGroup(releaseGroupId: string): Promise<ReleaseToReleaseGroupRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseToReleaseGroupRelationshipsByReleaseGroup?";
    if (releaseGroupId === undefined || releaseGroupId === null) throw new Error("The parameter 'releaseGroupId' must be defined and cannot be null.");
    else url_ += "releaseGroupId=" + encodeURIComponent("" + releaseGroupId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseToReleaseGroupRelationshipsByReleaseGroup(_response);
    });
  }

  protected processGetReleaseToReleaseGroupRelationshipsByReleaseGroup(response: Response): Promise<ReleaseToReleaseGroupRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseToReleaseGroupRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseToReleaseGroupRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseMediaToProductRelationships(releaseId: string): Promise<ReleaseMediaToProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseMediaToProductRelationships?";
    if (releaseId === undefined || releaseId === null) throw new Error("The parameter 'releaseId' must be defined and cannot be null.");
    else url_ += "releaseId=" + encodeURIComponent("" + releaseId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseMediaToProductRelationships(_response);
    });
  }

  protected processGetReleaseMediaToProductRelationships(response: Response): Promise<ReleaseMediaToProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseMediaToProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseMediaToProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseMediaToProductRelationshipsByProduct(productId: string): Promise<ReleaseMediaToProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseMediaToProductRelationshipsByProduct?";
    if (productId === undefined || productId === null) throw new Error("The parameter 'productId' must be defined and cannot be null.");
    else url_ += "productId=" + encodeURIComponent("" + productId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseMediaToProductRelationshipsByProduct(_response);
    });
  }

  protected processGetReleaseMediaToProductRelationshipsByProduct(response: Response): Promise<ReleaseMediaToProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseMediaToProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseMediaToProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseTrackToProductRelationships(releaseId: string): Promise<ReleaseTrackToProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseTrackToProductRelationships?";
    if (releaseId === undefined || releaseId === null) throw new Error("The parameter 'releaseId' must be defined and cannot be null.");
    else url_ += "releaseId=" + encodeURIComponent("" + releaseId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseTrackToProductRelationships(_response);
    });
  }

  protected processGetReleaseTrackToProductRelationships(response: Response): Promise<ReleaseTrackToProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseTrackToProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseTrackToProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseTrackToProductRelationshipsByProduct(productId: string): Promise<ReleaseTrackToProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseTrackToProductRelationshipsByProduct?";
    if (productId === undefined || productId === null) throw new Error("The parameter 'productId' must be defined and cannot be null.");
    else url_ += "productId=" + encodeURIComponent("" + productId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseTrackToProductRelationshipsByProduct(_response);
    });
  }

  protected processGetReleaseTrackToProductRelationshipsByProduct(response: Response): Promise<ReleaseTrackToProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseTrackToProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseTrackToProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseTrackToWorkRelationships(releaseId: string): Promise<ReleaseTrackToWorkRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseTrackToWorkRelationships?";
    if (releaseId === undefined || releaseId === null) throw new Error("The parameter 'releaseId' must be defined and cannot be null.");
    else url_ += "releaseId=" + encodeURIComponent("" + releaseId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseTrackToWorkRelationships(_response);
    });
  }

  protected processGetReleaseTrackToWorkRelationships(response: Response): Promise<ReleaseTrackToWorkRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseTrackToWorkRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseTrackToWorkRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseTrackToWorkRelationshipsByWork(workId: string): Promise<ReleaseTrackToWorkRelationship[]> {
    let url_ = this.baseUrl + "/api/Release/GetReleaseTrackToWorkRelationshipsByWork?";
    if (workId === undefined || workId === null) throw new Error("The parameter 'workId' must be defined and cannot be null.");
    else url_ += "workId=" + encodeURIComponent("" + workId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseTrackToWorkRelationshipsByWork(_response);
    });
  }

  protected processGetReleaseTrackToWorkRelationshipsByWork(response: Response): Promise<ReleaseTrackToWorkRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseTrackToWorkRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseTrackToWorkRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  createRelease(body: Release): Promise<Release> {
    let url_ = this.baseUrl + "/api/Release/CreateRelease";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateRelease(_response);
    });
  }

  protected processCreateRelease(response: Response): Promise<Release> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Release.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Release>(null as any);
  }

  /**
   * @return Success
   */
  updateRelease(body: Release): Promise<void> {
    let url_ = this.baseUrl + "/api/Release/UpdateRelease";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateRelease(_response);
    });
  }

  protected processUpdateRelease(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param useReferenceOrder (optional)
   * @return Success
   */
  updateReleaseToProductRelationshipsOrder(useReferenceOrder: boolean | undefined, body: ReleaseToProductRelationship[]): Promise<void> {
    let url_ = this.baseUrl + "/api/Release/UpdateReleaseToProductRelationshipsOrder?";
    if (useReferenceOrder === null) throw new Error("The parameter 'useReferenceOrder' cannot be null.");
    else if (useReferenceOrder !== undefined) url_ += "useReferenceOrder=" + encodeURIComponent("" + useReferenceOrder) + "&";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateReleaseToProductRelationshipsOrder(_response);
    });
  }

  protected processUpdateReleaseToProductRelationshipsOrder(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param useReferenceOrder (optional)
   * @return Success
   */
  updateReleaseToReleaseGroupRelationshipsOrder(useReferenceOrder: boolean | undefined, body: ReleaseToReleaseGroupRelationship[]): Promise<void> {
    let url_ = this.baseUrl + "/api/Release/UpdateReleaseToReleaseGroupRelationshipsOrder?";
    if (useReferenceOrder === null) throw new Error("The parameter 'useReferenceOrder' cannot be null.");
    else if (useReferenceOrder !== undefined) url_ += "useReferenceOrder=" + encodeURIComponent("" + useReferenceOrder) + "&";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateReleaseToReleaseGroupRelationshipsOrder(_response);
    });
  }

  protected processUpdateReleaseToReleaseGroupRelationshipsOrder(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param useReferenceOrder (optional)
   * @return Success
   */
  updateReleaseMediaToProductRelationshipsOrder(useReferenceOrder: boolean | undefined, body: ReleaseMediaToProductRelationship[]): Promise<void> {
    let url_ = this.baseUrl + "/api/Release/UpdateReleaseMediaToProductRelationshipsOrder?";
    if (useReferenceOrder === null) throw new Error("The parameter 'useReferenceOrder' cannot be null.");
    else if (useReferenceOrder !== undefined) url_ += "useReferenceOrder=" + encodeURIComponent("" + useReferenceOrder) + "&";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateReleaseMediaToProductRelationshipsOrder(_response);
    });
  }

  protected processUpdateReleaseMediaToProductRelationshipsOrder(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param useReferenceOrder (optional)
   * @return Success
   */
  updateReleaseTrackToProductRelationshipsOrder(useReferenceOrder: boolean | undefined, body: ReleaseTrackToProductRelationship[]): Promise<void> {
    let url_ = this.baseUrl + "/api/Release/UpdateReleaseTrackToProductRelationshipsOrder?";
    if (useReferenceOrder === null) throw new Error("The parameter 'useReferenceOrder' cannot be null.");
    else if (useReferenceOrder !== undefined) url_ += "useReferenceOrder=" + encodeURIComponent("" + useReferenceOrder) + "&";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateReleaseTrackToProductRelationshipsOrder(_response);
    });
  }

  protected processUpdateReleaseTrackToProductRelationshipsOrder(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param useReferenceOrder (optional)
   * @return Success
   */
  updateReleaseTrackToWorkRelationshipsOrder(useReferenceOrder: boolean | undefined, body: ReleaseTrackToWorkRelationship[]): Promise<void> {
    let url_ = this.baseUrl + "/api/Release/UpdateReleaseTrackToWorkRelationshipsOrder?";
    if (useReferenceOrder === null) throw new Error("The parameter 'useReferenceOrder' cannot be null.");
    else if (useReferenceOrder !== undefined) url_ += "useReferenceOrder=" + encodeURIComponent("" + useReferenceOrder) + "&";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateReleaseTrackToWorkRelationshipsOrder(_response);
    });
  }

  protected processUpdateReleaseTrackToWorkRelationshipsOrder(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  deleteRelease(releaseId: string): Promise<void> {
    let url_ = this.baseUrl + "/api/Release/DeleteRelease?";
    if (releaseId === undefined || releaseId === null) throw new Error("The parameter 'releaseId' must be defined and cannot be null.");
    else url_ += "releaseId=" + encodeURIComponent("" + releaseId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeleteRelease(_response);
    });
  }

  protected processDeleteRelease(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseGroup(releaseGroupId: string): Promise<ReleaseGroup> {
    let url_ = this.baseUrl + "/api/ReleaseGroup/GetReleaseGroup?";
    if (releaseGroupId === undefined || releaseGroupId === null) throw new Error("The parameter 'releaseGroupId' must be defined and cannot be null.");
    else url_ += "releaseGroupId=" + encodeURIComponent("" + releaseGroupId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseGroup(_response);
    });
  }

  protected processGetReleaseGroup(response: Response): Promise<ReleaseGroup> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ReleaseGroup.fromJS(resultData200);
        return result200;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseGroup>(null as any);
  }

  /**
   * @return Success
   */
  getReleaseGroups(releaseGroupIds: string[]): Promise<ReleaseGroup[]> {
    let url_ = this.baseUrl + "/api/ReleaseGroup/GetReleaseGroups?";
    if (releaseGroupIds === undefined || releaseGroupIds === null) throw new Error("The parameter 'releaseGroupIds' must be defined and cannot be null.");
    else
      releaseGroupIds &&
        releaseGroupIds.forEach((item) => {
          url_ += "releaseGroupIds=" + encodeURIComponent("" + item) + "&";
        });
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseGroups(_response);
    });
  }

  protected processGetReleaseGroups(response: Response): Promise<ReleaseGroup[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseGroup.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseGroup[]>(null as any);
  }

  /**
   * @return Success
   */
  getAllReleaseGroups(): Promise<ReleaseGroup[]> {
    let url_ = this.baseUrl + "/api/ReleaseGroup/GetAllReleaseGroups";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAllReleaseGroups(_response);
    });
  }

  protected processGetAllReleaseGroups(response: Response): Promise<ReleaseGroup[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseGroup.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseGroup[]>(null as any);
  }

  /**
   * @param title (optional)
   * @param enabled (optional)
   * @return Success
   */
  getPagedReleaseGroups(pageSize: number, pageIndex: number, title: string | undefined, enabled: boolean | undefined): Promise<ReleaseGroupPageResponse> {
    let url_ = this.baseUrl + "/api/ReleaseGroup/GetPagedReleaseGroups?";
    if (pageSize === undefined || pageSize === null) throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
    else url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (pageIndex === undefined || pageIndex === null) throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
    else url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (title === null) throw new Error("The parameter 'title' cannot be null.");
    else if (title !== undefined) url_ += "title=" + encodeURIComponent("" + title) + "&";
    if (enabled === null) throw new Error("The parameter 'enabled' cannot be null.");
    else if (enabled !== undefined) url_ += "enabled=" + encodeURIComponent("" + enabled) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetPagedReleaseGroups(_response);
    });
  }

  protected processGetPagedReleaseGroups(response: Response): Promise<ReleaseGroupPageResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ReleaseGroupPageResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseGroupPageResponse>(null as any);
  }

  /**
   * @param includeReverseRelationships (optional)
   * @return Success
   */
  getReleaseGroupRelationships(releaseGroupId: string, includeReverseRelationships: boolean | undefined): Promise<ReleaseGroupRelationship[]> {
    let url_ = this.baseUrl + "/api/ReleaseGroup/GetReleaseGroupRelationships?";
    if (releaseGroupId === undefined || releaseGroupId === null) throw new Error("The parameter 'releaseGroupId' must be defined and cannot be null.");
    else url_ += "releaseGroupId=" + encodeURIComponent("" + releaseGroupId) + "&";
    if (includeReverseRelationships === null) throw new Error("The parameter 'includeReverseRelationships' cannot be null.");
    else if (includeReverseRelationships !== undefined) url_ += "includeReverseRelationships=" + encodeURIComponent("" + includeReverseRelationships) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetReleaseGroupRelationships(_response);
    });
  }

  protected processGetReleaseGroupRelationships(response: Response): Promise<ReleaseGroupRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(ReleaseGroupRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseGroupRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  createReleaseGroup(body: ReleaseGroup): Promise<ReleaseGroup> {
    let url_ = this.baseUrl + "/api/ReleaseGroup/CreateReleaseGroup";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateReleaseGroup(_response);
    });
  }

  protected processCreateReleaseGroup(response: Response): Promise<ReleaseGroup> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ReleaseGroup.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ReleaseGroup>(null as any);
  }

  /**
   * @return Success
   */
  updateReleaseGroup(body: ReleaseGroup): Promise<void> {
    let url_ = this.baseUrl + "/api/ReleaseGroup/UpdateReleaseGroup";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateReleaseGroup(_response);
    });
  }

  protected processUpdateReleaseGroup(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  deleteReleaseGroup(releaseGroupId: string): Promise<void> {
    let url_ = this.baseUrl + "/api/ReleaseGroup/DeleteReleaseGroup?";
    if (releaseGroupId === undefined || releaseGroupId === null) throw new Error("The parameter 'releaseGroupId' must be defined and cannot be null.");
    else url_ += "releaseGroupId=" + encodeURIComponent("" + releaseGroupId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeleteReleaseGroup(_response);
    });
  }

  protected processDeleteReleaseGroup(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  getWork(workId: string): Promise<Work> {
    let url_ = this.baseUrl + "/api/Work/GetWork?";
    if (workId === undefined || workId === null) throw new Error("The parameter 'workId' must be defined and cannot be null.");
    else url_ += "workId=" + encodeURIComponent("" + workId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetWork(_response);
    });
  }

  protected processGetWork(response: Response): Promise<Work> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Work.fromJS(resultData200);
        return result200;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Work>(null as any);
  }

  /**
   * @return Success
   */
  getWorks(workIds: string[]): Promise<Work[]> {
    let url_ = this.baseUrl + "/api/Work/GetWorks?";
    if (workIds === undefined || workIds === null) throw new Error("The parameter 'workIds' must be defined and cannot be null.");
    else
      workIds &&
        workIds.forEach((item) => {
          url_ += "workIds=" + encodeURIComponent("" + item) + "&";
        });
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetWorks(_response);
    });
  }

  protected processGetWorks(response: Response): Promise<Work[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Work.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Work[]>(null as any);
  }

  /**
   * @return Success
   */
  getAllWorks(): Promise<Work[]> {
    let url_ = this.baseUrl + "/api/Work/GetAllWorks";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAllWorks(_response);
    });
  }

  protected processGetAllWorks(response: Response): Promise<Work[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Work.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Work[]>(null as any);
  }

  /**
   * @param title (optional)
   * @param enabled (optional)
   * @return Success
   */
  getPagedWorks(pageSize: number, pageIndex: number, title: string | undefined, enabled: boolean | undefined): Promise<WorkPageResponse> {
    let url_ = this.baseUrl + "/api/Work/GetPagedWorks?";
    if (pageSize === undefined || pageSize === null) throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
    else url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (pageIndex === undefined || pageIndex === null) throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
    else url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (title === null) throw new Error("The parameter 'title' cannot be null.");
    else if (title !== undefined) url_ += "title=" + encodeURIComponent("" + title) + "&";
    if (enabled === null) throw new Error("The parameter 'enabled' cannot be null.");
    else if (enabled !== undefined) url_ += "enabled=" + encodeURIComponent("" + enabled) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetPagedWorks(_response);
    });
  }

  protected processGetPagedWorks(response: Response): Promise<WorkPageResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = WorkPageResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<WorkPageResponse>(null as any);
  }

  /**
   * @param includeReverseRelationships (optional)
   * @return Success
   */
  getWorkRelationships(workId: string, includeReverseRelationships: boolean | undefined): Promise<WorkRelationship[]> {
    let url_ = this.baseUrl + "/api/Work/GetWorkRelationships?";
    if (workId === undefined || workId === null) throw new Error("The parameter 'workId' must be defined and cannot be null.");
    else url_ += "workId=" + encodeURIComponent("" + workId) + "&";
    if (includeReverseRelationships === null) throw new Error("The parameter 'includeReverseRelationships' cannot be null.");
    else if (includeReverseRelationships !== undefined) url_ += "includeReverseRelationships=" + encodeURIComponent("" + includeReverseRelationships) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetWorkRelationships(_response);
    });
  }

  protected processGetWorkRelationships(response: Response): Promise<WorkRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(WorkRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<WorkRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getWorkToProductRelationships(workId: string): Promise<WorkToProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Work/GetWorkToProductRelationships?";
    if (workId === undefined || workId === null) throw new Error("The parameter 'workId' must be defined and cannot be null.");
    else url_ += "workId=" + encodeURIComponent("" + workId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetWorkToProductRelationships(_response);
    });
  }

  protected processGetWorkToProductRelationships(response: Response): Promise<WorkToProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(WorkToProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<WorkToProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  getWorkToProductRelationshipsByProduct(productId: string): Promise<WorkToProductRelationship[]> {
    let url_ = this.baseUrl + "/api/Work/GetWorkToProductRelationshipsByProduct?";
    if (productId === undefined || productId === null) throw new Error("The parameter 'productId' must be defined and cannot be null.");
    else url_ += "productId=" + encodeURIComponent("" + productId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetWorkToProductRelationshipsByProduct(_response);
    });
  }

  protected processGetWorkToProductRelationshipsByProduct(response: Response): Promise<WorkToProductRelationship[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(WorkToProductRelationship.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<WorkToProductRelationship[]>(null as any);
  }

  /**
   * @return Success
   */
  createWork(body: Work): Promise<Work> {
    let url_ = this.baseUrl + "/api/Work/CreateWork";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateWork(_response);
    });
  }

  protected processCreateWork(response: Response): Promise<Work> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = Work.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<Work>(null as any);
  }

  /**
   * @return Success
   */
  updateWork(body: Work): Promise<void> {
    let url_ = this.baseUrl + "/api/Work/UpdateWork";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateWork(_response);
    });
  }

  protected processUpdateWork(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param useReferenceOrder (optional)
   * @return Success
   */
  updateWorkToProductRelationshipsOrder(useReferenceOrder: boolean | undefined, body: WorkToProductRelationship[]): Promise<void> {
    let url_ = this.baseUrl + "/api/Work/UpdateWorkToProductRelationshipsOrder?";
    if (useReferenceOrder === null) throw new Error("The parameter 'useReferenceOrder' cannot be null.");
    else if (useReferenceOrder !== undefined) url_ += "useReferenceOrder=" + encodeURIComponent("" + useReferenceOrder) + "&";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateWorkToProductRelationshipsOrder(_response);
    });
  }

  protected processUpdateWorkToProductRelationshipsOrder(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  deleteWork(workId: string): Promise<void> {
    let url_ = this.baseUrl + "/api/Work/DeleteWork?";
    if (workId === undefined || workId === null) throw new Error("The parameter 'workId' must be defined and cannot be null.");
    else url_ += "workId=" + encodeURIComponent("" + workId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeleteWork(_response);
    });
  }

  protected processDeleteWork(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class Artist implements IArtist {
  id!: string;
  name!: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  systemEntity!: boolean;
  enabled!: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  artistRelationships!: ArtistRelationship[];
  artistGenres!: ArtistGenre[];

  constructor(data?: IArtist) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.artistRelationships = [];
      this.artistGenres = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.disambiguationText = _data["disambiguationText"];
      this.systemEntity = _data["systemEntity"];
      this.enabled = _data["enabled"];
      this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
      this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
      if (Array.isArray(_data["artistRelationships"])) {
        this.artistRelationships = [] as any;
        for (let item of _data["artistRelationships"]) this.artistRelationships!.push(ArtistRelationship.fromJS(item));
      }
      if (Array.isArray(_data["artistGenres"])) {
        this.artistGenres = [] as any;
        for (let item of _data["artistGenres"]) this.artistGenres!.push(ArtistGenre.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Artist {
    data = typeof data === "object" ? data : {};
    let result = new Artist();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    data["disambiguationText"] = this.disambiguationText;
    data["systemEntity"] = this.systemEntity;
    data["enabled"] = this.enabled;
    data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
    data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
    if (Array.isArray(this.artistRelationships)) {
      data["artistRelationships"] = [];
      for (let item of this.artistRelationships) data["artistRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.artistGenres)) {
      data["artistGenres"] = [];
      for (let item of this.artistGenres) data["artistGenres"].push(item.toJSON());
    }
    return data;
  }
}

export interface IArtist {
  id: string;
  name: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  systemEntity: boolean;
  enabled: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  artistRelationships: ArtistRelationship[];
  artistGenres: ArtistGenre[];
}

export class ArtistGenre implements IArtistGenre {
  artistId!: string;
  genreId!: string;
  artist?: Artist;
  genre?: Genre;

  constructor(data?: IArtistGenre) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.artistId = _data["artistId"];
      this.genreId = _data["genreId"];
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
      this.genre = _data["genre"] ? Genre.fromJS(_data["genre"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ArtistGenre {
    data = typeof data === "object" ? data : {};
    let result = new ArtistGenre();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["artistId"] = this.artistId;
    data["genreId"] = this.genreId;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
    return data;
  }
}

export interface IArtistGenre {
  artistId: string;
  genreId: string;
  artist?: Artist;
  genre?: Genre;
}

export class ArtistPageResponse implements IArtistPageResponse {
  pageSize!: number;
  pageIndex!: number;
  totalCount!: number;
  items!: Artist[];

  constructor(data?: IArtistPageResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.items = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageSize = _data["pageSize"];
      this.pageIndex = _data["pageIndex"];
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(Artist.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ArtistPageResponse {
    data = typeof data === "object" ? data : {};
    let result = new ArtistPageResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["pageSize"] = this.pageSize;
    data["pageIndex"] = this.pageIndex;
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IArtistPageResponse {
  pageSize: number;
  pageIndex: number;
  totalCount: number;
  items: Artist[];
}

export class ArtistRelationship implements IArtistRelationship {
  artistId!: string;
  dependentArtistId!: string;
  name!: string;
  description?: string | undefined;
  artist?: Artist;
  dependentArtist?: Artist;

  constructor(data?: IArtistRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.artistId = _data["artistId"];
      this.dependentArtistId = _data["dependentArtistId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
      this.dependentArtist = _data["dependentArtist"] ? Artist.fromJS(_data["dependentArtist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ArtistRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ArtistRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["artistId"] = this.artistId;
    data["dependentArtistId"] = this.dependentArtistId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    data["dependentArtist"] = this.dependentArtist ? this.dependentArtist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IArtistRelationship {
  artistId: string;
  dependentArtistId: string;
  name: string;
  description?: string | undefined;
  artist?: Artist;
  dependentArtist?: Artist;
}

export class Genre implements IGenre {
  id!: string;
  name!: string;
  description?: string | undefined;
  systemEntity!: boolean;
  enabled!: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  genreRelationships!: GenreRelationship[];

  constructor(data?: IGenre) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.genreRelationships = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.systemEntity = _data["systemEntity"];
      this.enabled = _data["enabled"];
      this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
      this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
      if (Array.isArray(_data["genreRelationships"])) {
        this.genreRelationships = [] as any;
        for (let item of _data["genreRelationships"]) this.genreRelationships!.push(GenreRelationship.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Genre {
    data = typeof data === "object" ? data : {};
    let result = new Genre();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    data["systemEntity"] = this.systemEntity;
    data["enabled"] = this.enabled;
    data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
    data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
    if (Array.isArray(this.genreRelationships)) {
      data["genreRelationships"] = [];
      for (let item of this.genreRelationships) data["genreRelationships"].push(item.toJSON());
    }
    return data;
  }
}

export interface IGenre {
  id: string;
  name: string;
  description?: string | undefined;
  systemEntity: boolean;
  enabled: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  genreRelationships: GenreRelationship[];
}

export class GenrePageResponse implements IGenrePageResponse {
  pageSize!: number;
  pageIndex!: number;
  totalCount!: number;
  items!: Genre[];

  constructor(data?: IGenrePageResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.items = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageSize = _data["pageSize"];
      this.pageIndex = _data["pageIndex"];
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(Genre.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GenrePageResponse {
    data = typeof data === "object" ? data : {};
    let result = new GenrePageResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["pageSize"] = this.pageSize;
    data["pageIndex"] = this.pageIndex;
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IGenrePageResponse {
  pageSize: number;
  pageIndex: number;
  totalCount: number;
  items: Genre[];
}

export class GenreRelationship implements IGenreRelationship {
  genreId!: string;
  dependentGenreId!: string;
  name!: string;
  description?: string | undefined;
  genre?: Genre;
  dependentGenre?: Genre;

  constructor(data?: IGenreRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.genreId = _data["genreId"];
      this.dependentGenreId = _data["dependentGenreId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.genre = _data["genre"] ? Genre.fromJS(_data["genre"]) : <any>undefined;
      this.dependentGenre = _data["dependentGenre"] ? Genre.fromJS(_data["dependentGenre"]) : <any>undefined;
    }
  }

  static fromJS(data: any): GenreRelationship {
    data = typeof data === "object" ? data : {};
    let result = new GenreRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["genreId"] = this.genreId;
    data["dependentGenreId"] = this.dependentGenreId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
    data["dependentGenre"] = this.dependentGenre ? this.dependentGenre.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGenreRelationship {
  genreId: string;
  dependentGenreId: string;
  name: string;
  description?: string | undefined;
  genre?: Genre;
  dependentGenre?: Genre;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data["type"];
      this.title = _data["title"];
      this.status = _data["status"];
      this.detail = _data["detail"];
      this.instance = _data["instance"];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === "object" ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data["type"] = this.type;
    data["title"] = this.title;
    data["status"] = this.status;
    data["detail"] = this.detail;
    data["instance"] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class Product implements IProduct {
  id!: string;
  title!: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  releasedOn!: Date;
  releasedOnYearOnly!: boolean;
  systemEntity!: boolean;
  enabled!: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  productRelationships!: ProductRelationship[];

  constructor(data?: IProduct) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.productRelationships = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.title = _data["title"];
      this.description = _data["description"];
      this.disambiguationText = _data["disambiguationText"];
      this.releasedOn = _data["releasedOn"] ? new Date(_data["releasedOn"].toString()) : <any>undefined;
      this.releasedOnYearOnly = _data["releasedOnYearOnly"];
      this.systemEntity = _data["systemEntity"];
      this.enabled = _data["enabled"];
      this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
      this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
      if (Array.isArray(_data["productRelationships"])) {
        this.productRelationships = [] as any;
        for (let item of _data["productRelationships"]) this.productRelationships!.push(ProductRelationship.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Product {
    data = typeof data === "object" ? data : {};
    let result = new Product();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["title"] = this.title;
    data["description"] = this.description;
    data["disambiguationText"] = this.disambiguationText;
    data["releasedOn"] = this.releasedOn ? this.releasedOn.toISOString() : <any>undefined;
    data["releasedOnYearOnly"] = this.releasedOnYearOnly;
    data["systemEntity"] = this.systemEntity;
    data["enabled"] = this.enabled;
    data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
    data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
    if (Array.isArray(this.productRelationships)) {
      data["productRelationships"] = [];
      for (let item of this.productRelationships) data["productRelationships"].push(item.toJSON());
    }
    return data;
  }
}

export interface IProduct {
  id: string;
  title: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  releasedOn: Date;
  releasedOnYearOnly: boolean;
  systemEntity: boolean;
  enabled: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  productRelationships: ProductRelationship[];
}

export class ProductPageResponse implements IProductPageResponse {
  pageSize!: number;
  pageIndex!: number;
  totalCount!: number;
  items!: Product[];

  constructor(data?: IProductPageResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.items = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageSize = _data["pageSize"];
      this.pageIndex = _data["pageIndex"];
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(Product.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ProductPageResponse {
    data = typeof data === "object" ? data : {};
    let result = new ProductPageResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["pageSize"] = this.pageSize;
    data["pageIndex"] = this.pageIndex;
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IProductPageResponse {
  pageSize: number;
  pageIndex: number;
  totalCount: number;
  items: Product[];
}

export class ProductRelationship implements IProductRelationship {
  productId!: string;
  dependentProductId!: string;
  name!: string;
  description?: string | undefined;
  product?: Product;
  dependentProduct?: Product;

  constructor(data?: IProductRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productId = _data["productId"];
      this.dependentProductId = _data["dependentProductId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
      this.dependentProduct = _data["dependentProduct"] ? Product.fromJS(_data["dependentProduct"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ProductRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ProductRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["productId"] = this.productId;
    data["dependentProductId"] = this.dependentProductId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["product"] = this.product ? this.product.toJSON() : <any>undefined;
    data["dependentProduct"] = this.dependentProduct ? this.dependentProduct.toJSON() : <any>undefined;
    return data;
  }
}

export interface IProductRelationship {
  productId: string;
  dependentProductId: string;
  name: string;
  description?: string | undefined;
  product?: Product;
  dependentProduct?: Product;
}

export class Release implements IRelease {
  id!: string;
  title!: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  mediaFormat?: string | undefined;
  publishFormat?: string | undefined;
  catalogNumber?: string | undefined;
  barcode?: string | undefined;
  releasedOn!: Date;
  releasedOnYearOnly!: boolean;
  enabled!: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  releaseMediaCollection!: ReleaseMedia[];
  releaseRelationships!: ReleaseRelationship[];
  releaseToProductRelationships!: ReleaseToProductRelationship[];
  releaseToReleaseGroupRelationships!: ReleaseToReleaseGroupRelationship[];
  releaseArtists!: ReleaseArtist[];
  releaseFeaturedArtists!: ReleaseFeaturedArtist[];
  releasePerformers!: ReleasePerformer[];
  releaseComposers!: ReleaseComposer[];
  releaseGenres!: ReleaseGenre[];

  constructor(data?: IRelease) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.releaseMediaCollection = [];
      this.releaseRelationships = [];
      this.releaseToProductRelationships = [];
      this.releaseToReleaseGroupRelationships = [];
      this.releaseArtists = [];
      this.releaseFeaturedArtists = [];
      this.releasePerformers = [];
      this.releaseComposers = [];
      this.releaseGenres = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.title = _data["title"];
      this.description = _data["description"];
      this.disambiguationText = _data["disambiguationText"];
      this.mediaFormat = _data["mediaFormat"];
      this.publishFormat = _data["publishFormat"];
      this.catalogNumber = _data["catalogNumber"];
      this.barcode = _data["barcode"];
      this.releasedOn = _data["releasedOn"] ? new Date(_data["releasedOn"].toString()) : <any>undefined;
      this.releasedOnYearOnly = _data["releasedOnYearOnly"];
      this.enabled = _data["enabled"];
      this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
      this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
      if (Array.isArray(_data["releaseMediaCollection"])) {
        this.releaseMediaCollection = [] as any;
        for (let item of _data["releaseMediaCollection"]) this.releaseMediaCollection!.push(ReleaseMedia.fromJS(item));
      }
      if (Array.isArray(_data["releaseRelationships"])) {
        this.releaseRelationships = [] as any;
        for (let item of _data["releaseRelationships"]) this.releaseRelationships!.push(ReleaseRelationship.fromJS(item));
      }
      if (Array.isArray(_data["releaseToProductRelationships"])) {
        this.releaseToProductRelationships = [] as any;
        for (let item of _data["releaseToProductRelationships"]) this.releaseToProductRelationships!.push(ReleaseToProductRelationship.fromJS(item));
      }
      if (Array.isArray(_data["releaseToReleaseGroupRelationships"])) {
        this.releaseToReleaseGroupRelationships = [] as any;
        for (let item of _data["releaseToReleaseGroupRelationships"])
          this.releaseToReleaseGroupRelationships!.push(ReleaseToReleaseGroupRelationship.fromJS(item));
      }
      if (Array.isArray(_data["releaseArtists"])) {
        this.releaseArtists = [] as any;
        for (let item of _data["releaseArtists"]) this.releaseArtists!.push(ReleaseArtist.fromJS(item));
      }
      if (Array.isArray(_data["releaseFeaturedArtists"])) {
        this.releaseFeaturedArtists = [] as any;
        for (let item of _data["releaseFeaturedArtists"]) this.releaseFeaturedArtists!.push(ReleaseFeaturedArtist.fromJS(item));
      }
      if (Array.isArray(_data["releasePerformers"])) {
        this.releasePerformers = [] as any;
        for (let item of _data["releasePerformers"]) this.releasePerformers!.push(ReleasePerformer.fromJS(item));
      }
      if (Array.isArray(_data["releaseComposers"])) {
        this.releaseComposers = [] as any;
        for (let item of _data["releaseComposers"]) this.releaseComposers!.push(ReleaseComposer.fromJS(item));
      }
      if (Array.isArray(_data["releaseGenres"])) {
        this.releaseGenres = [] as any;
        for (let item of _data["releaseGenres"]) this.releaseGenres!.push(ReleaseGenre.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Release {
    data = typeof data === "object" ? data : {};
    let result = new Release();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["title"] = this.title;
    data["description"] = this.description;
    data["disambiguationText"] = this.disambiguationText;
    data["mediaFormat"] = this.mediaFormat;
    data["publishFormat"] = this.publishFormat;
    data["catalogNumber"] = this.catalogNumber;
    data["barcode"] = this.barcode;
    data["releasedOn"] = this.releasedOn ? this.releasedOn.toISOString() : <any>undefined;
    data["releasedOnYearOnly"] = this.releasedOnYearOnly;
    data["enabled"] = this.enabled;
    data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
    data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
    if (Array.isArray(this.releaseMediaCollection)) {
      data["releaseMediaCollection"] = [];
      for (let item of this.releaseMediaCollection) data["releaseMediaCollection"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseRelationships)) {
      data["releaseRelationships"] = [];
      for (let item of this.releaseRelationships) data["releaseRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseToProductRelationships)) {
      data["releaseToProductRelationships"] = [];
      for (let item of this.releaseToProductRelationships) data["releaseToProductRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseToReleaseGroupRelationships)) {
      data["releaseToReleaseGroupRelationships"] = [];
      for (let item of this.releaseToReleaseGroupRelationships) data["releaseToReleaseGroupRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseArtists)) {
      data["releaseArtists"] = [];
      for (let item of this.releaseArtists) data["releaseArtists"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseFeaturedArtists)) {
      data["releaseFeaturedArtists"] = [];
      for (let item of this.releaseFeaturedArtists) data["releaseFeaturedArtists"].push(item.toJSON());
    }
    if (Array.isArray(this.releasePerformers)) {
      data["releasePerformers"] = [];
      for (let item of this.releasePerformers) data["releasePerformers"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseComposers)) {
      data["releaseComposers"] = [];
      for (let item of this.releaseComposers) data["releaseComposers"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseGenres)) {
      data["releaseGenres"] = [];
      for (let item of this.releaseGenres) data["releaseGenres"].push(item.toJSON());
    }
    return data;
  }
}

export interface IRelease {
  id: string;
  title: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  mediaFormat?: string | undefined;
  publishFormat?: string | undefined;
  catalogNumber?: string | undefined;
  barcode?: string | undefined;
  releasedOn: Date;
  releasedOnYearOnly: boolean;
  enabled: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  releaseMediaCollection: ReleaseMedia[];
  releaseRelationships: ReleaseRelationship[];
  releaseToProductRelationships: ReleaseToProductRelationship[];
  releaseToReleaseGroupRelationships: ReleaseToReleaseGroupRelationship[];
  releaseArtists: ReleaseArtist[];
  releaseFeaturedArtists: ReleaseFeaturedArtist[];
  releasePerformers: ReleasePerformer[];
  releaseComposers: ReleaseComposer[];
  releaseGenres: ReleaseGenre[];
}

export class ReleaseArtist implements IReleaseArtist {
  releaseId!: string;
  artistId!: string;
  release?: Release;
  artist?: Artist;

  constructor(data?: IReleaseArtist) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseId = _data["releaseId"];
      this.artistId = _data["artistId"];
      this.release = _data["release"] ? Release.fromJS(_data["release"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseArtist {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseArtist();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseId"] = this.releaseId;
    data["artistId"] = this.artistId;
    data["release"] = this.release ? this.release.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseArtist {
  releaseId: string;
  artistId: string;
  release?: Release;
  artist?: Artist;
}

export class ReleaseComposer implements IReleaseComposer {
  releaseId!: string;
  artistId!: string;
  release?: Release;
  artist?: Artist;

  constructor(data?: IReleaseComposer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseId = _data["releaseId"];
      this.artistId = _data["artistId"];
      this.release = _data["release"] ? Release.fromJS(_data["release"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseComposer {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseComposer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseId"] = this.releaseId;
    data["artistId"] = this.artistId;
    data["release"] = this.release ? this.release.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseComposer {
  releaseId: string;
  artistId: string;
  release?: Release;
  artist?: Artist;
}

export class ReleaseFeaturedArtist implements IReleaseFeaturedArtist {
  releaseId!: string;
  artistId!: string;
  release?: Release;
  artist?: Artist;

  constructor(data?: IReleaseFeaturedArtist) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseId = _data["releaseId"];
      this.artistId = _data["artistId"];
      this.release = _data["release"] ? Release.fromJS(_data["release"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseFeaturedArtist {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseFeaturedArtist();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseId"] = this.releaseId;
    data["artistId"] = this.artistId;
    data["release"] = this.release ? this.release.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseFeaturedArtist {
  releaseId: string;
  artistId: string;
  release?: Release;
  artist?: Artist;
}

export class ReleaseGenre implements IReleaseGenre {
  releaseId!: string;
  genreId!: string;
  release?: Release;
  genre?: Genre;

  constructor(data?: IReleaseGenre) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseId = _data["releaseId"];
      this.genreId = _data["genreId"];
      this.release = _data["release"] ? Release.fromJS(_data["release"]) : <any>undefined;
      this.genre = _data["genre"] ? Genre.fromJS(_data["genre"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseGenre {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseGenre();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseId"] = this.releaseId;
    data["genreId"] = this.genreId;
    data["release"] = this.release ? this.release.toJSON() : <any>undefined;
    data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseGenre {
  releaseId: string;
  genreId: string;
  release?: Release;
  genre?: Genre;
}

export class ReleaseGroup implements IReleaseGroup {
  id!: string;
  title!: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  enabled!: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  releaseGroupRelationships!: ReleaseGroupRelationship[];

  constructor(data?: IReleaseGroup) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.releaseGroupRelationships = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.title = _data["title"];
      this.description = _data["description"];
      this.disambiguationText = _data["disambiguationText"];
      this.enabled = _data["enabled"];
      this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
      this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
      if (Array.isArray(_data["releaseGroupRelationships"])) {
        this.releaseGroupRelationships = [] as any;
        for (let item of _data["releaseGroupRelationships"]) this.releaseGroupRelationships!.push(ReleaseGroupRelationship.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ReleaseGroup {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseGroup();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["title"] = this.title;
    data["description"] = this.description;
    data["disambiguationText"] = this.disambiguationText;
    data["enabled"] = this.enabled;
    data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
    data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
    if (Array.isArray(this.releaseGroupRelationships)) {
      data["releaseGroupRelationships"] = [];
      for (let item of this.releaseGroupRelationships) data["releaseGroupRelationships"].push(item.toJSON());
    }
    return data;
  }
}

export interface IReleaseGroup {
  id: string;
  title: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  enabled: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  releaseGroupRelationships: ReleaseGroupRelationship[];
}

export class ReleaseGroupPageResponse implements IReleaseGroupPageResponse {
  pageSize!: number;
  pageIndex!: number;
  totalCount!: number;
  items!: ReleaseGroup[];

  constructor(data?: IReleaseGroupPageResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.items = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageSize = _data["pageSize"];
      this.pageIndex = _data["pageIndex"];
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(ReleaseGroup.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ReleaseGroupPageResponse {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseGroupPageResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["pageSize"] = this.pageSize;
    data["pageIndex"] = this.pageIndex;
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IReleaseGroupPageResponse {
  pageSize: number;
  pageIndex: number;
  totalCount: number;
  items: ReleaseGroup[];
}

export class ReleaseGroupRelationship implements IReleaseGroupRelationship {
  releaseGroupId!: string;
  dependentReleaseGroupId!: string;
  name!: string;
  description?: string | undefined;
  releaseGroup?: ReleaseGroup;
  dependentReleaseGroup?: ReleaseGroup;

  constructor(data?: IReleaseGroupRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseGroupId = _data["releaseGroupId"];
      this.dependentReleaseGroupId = _data["dependentReleaseGroupId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.releaseGroup = _data["releaseGroup"] ? ReleaseGroup.fromJS(_data["releaseGroup"]) : <any>undefined;
      this.dependentReleaseGroup = _data["dependentReleaseGroup"] ? ReleaseGroup.fromJS(_data["dependentReleaseGroup"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseGroupRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseGroupRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseGroupId"] = this.releaseGroupId;
    data["dependentReleaseGroupId"] = this.dependentReleaseGroupId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["releaseGroup"] = this.releaseGroup ? this.releaseGroup.toJSON() : <any>undefined;
    data["dependentReleaseGroup"] = this.dependentReleaseGroup ? this.dependentReleaseGroup.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseGroupRelationship {
  releaseGroupId: string;
  dependentReleaseGroupId: string;
  name: string;
  description?: string | undefined;
  releaseGroup?: ReleaseGroup;
  dependentReleaseGroup?: ReleaseGroup;
}

export class ReleaseMedia implements IReleaseMedia {
  mediaNumber!: number;
  releaseId!: string;
  title!: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  mediaFormat?: string | undefined;
  catalogNumber?: string | undefined;
  freeDbChecksum?: string | undefined;
  musicBrainzChecksum?: string | undefined;
  releaseMediaToProductRelationships!: ReleaseMediaToProductRelationship[];
  releaseTrackCollection!: ReleaseTrack[];

  constructor(data?: IReleaseMedia) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.releaseMediaToProductRelationships = [];
      this.releaseTrackCollection = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.title = _data["title"];
      this.description = _data["description"];
      this.disambiguationText = _data["disambiguationText"];
      this.mediaFormat = _data["mediaFormat"];
      this.catalogNumber = _data["catalogNumber"];
      this.freeDbChecksum = _data["freeDbChecksum"];
      this.musicBrainzChecksum = _data["musicBrainzChecksum"];
      if (Array.isArray(_data["releaseMediaToProductRelationships"])) {
        this.releaseMediaToProductRelationships = [] as any;
        for (let item of _data["releaseMediaToProductRelationships"])
          this.releaseMediaToProductRelationships!.push(ReleaseMediaToProductRelationship.fromJS(item));
      }
      if (Array.isArray(_data["releaseTrackCollection"])) {
        this.releaseTrackCollection = [] as any;
        for (let item of _data["releaseTrackCollection"]) this.releaseTrackCollection!.push(ReleaseTrack.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ReleaseMedia {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseMedia();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["title"] = this.title;
    data["description"] = this.description;
    data["disambiguationText"] = this.disambiguationText;
    data["mediaFormat"] = this.mediaFormat;
    data["catalogNumber"] = this.catalogNumber;
    data["freeDbChecksum"] = this.freeDbChecksum;
    data["musicBrainzChecksum"] = this.musicBrainzChecksum;
    if (Array.isArray(this.releaseMediaToProductRelationships)) {
      data["releaseMediaToProductRelationships"] = [];
      for (let item of this.releaseMediaToProductRelationships) data["releaseMediaToProductRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseTrackCollection)) {
      data["releaseTrackCollection"] = [];
      for (let item of this.releaseTrackCollection) data["releaseTrackCollection"].push(item.toJSON());
    }
    return data;
  }
}

export interface IReleaseMedia {
  mediaNumber: number;
  releaseId: string;
  title: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  mediaFormat?: string | undefined;
  catalogNumber?: string | undefined;
  freeDbChecksum?: string | undefined;
  musicBrainzChecksum?: string | undefined;
  releaseMediaToProductRelationships: ReleaseMediaToProductRelationship[];
  releaseTrackCollection: ReleaseTrack[];
}

export class ReleaseMediaToProductRelationship implements IReleaseMediaToProductRelationship {
  mediaNumber!: number;
  releaseId!: string;
  productId!: string;
  name!: string;
  description?: string | undefined;
  releaseMedia?: ReleaseMedia;
  product?: Product;

  constructor(data?: IReleaseMediaToProductRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.productId = _data["productId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.releaseMedia = _data["releaseMedia"] ? ReleaseMedia.fromJS(_data["releaseMedia"]) : <any>undefined;
      this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseMediaToProductRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseMediaToProductRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["productId"] = this.productId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["releaseMedia"] = this.releaseMedia ? this.releaseMedia.toJSON() : <any>undefined;
    data["product"] = this.product ? this.product.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseMediaToProductRelationship {
  mediaNumber: number;
  releaseId: string;
  productId: string;
  name: string;
  description?: string | undefined;
  releaseMedia?: ReleaseMedia;
  product?: Product;
}

export class ReleasePageResponse implements IReleasePageResponse {
  pageSize!: number;
  pageIndex!: number;
  totalCount!: number;
  items!: Release[];

  constructor(data?: IReleasePageResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.items = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageSize = _data["pageSize"];
      this.pageIndex = _data["pageIndex"];
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(Release.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ReleasePageResponse {
    data = typeof data === "object" ? data : {};
    let result = new ReleasePageResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["pageSize"] = this.pageSize;
    data["pageIndex"] = this.pageIndex;
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IReleasePageResponse {
  pageSize: number;
  pageIndex: number;
  totalCount: number;
  items: Release[];
}

export class ReleasePerformer implements IReleasePerformer {
  releaseId!: string;
  artistId!: string;
  release?: Release;
  artist?: Artist;

  constructor(data?: IReleasePerformer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseId = _data["releaseId"];
      this.artistId = _data["artistId"];
      this.release = _data["release"] ? Release.fromJS(_data["release"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleasePerformer {
    data = typeof data === "object" ? data : {};
    let result = new ReleasePerformer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseId"] = this.releaseId;
    data["artistId"] = this.artistId;
    data["release"] = this.release ? this.release.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleasePerformer {
  releaseId: string;
  artistId: string;
  release?: Release;
  artist?: Artist;
}

export class ReleaseRelationship implements IReleaseRelationship {
  releaseId!: string;
  dependentReleaseId!: string;
  name!: string;
  description?: string | undefined;
  release?: Release;
  dependentRelease?: Release;

  constructor(data?: IReleaseRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseId = _data["releaseId"];
      this.dependentReleaseId = _data["dependentReleaseId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.release = _data["release"] ? Release.fromJS(_data["release"]) : <any>undefined;
      this.dependentRelease = _data["dependentRelease"] ? Release.fromJS(_data["dependentRelease"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseId"] = this.releaseId;
    data["dependentReleaseId"] = this.dependentReleaseId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["release"] = this.release ? this.release.toJSON() : <any>undefined;
    data["dependentRelease"] = this.dependentRelease ? this.dependentRelease.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseRelationship {
  releaseId: string;
  dependentReleaseId: string;
  name: string;
  description?: string | undefined;
  release?: Release;
  dependentRelease?: Release;
}

export class ReleaseToProductRelationship implements IReleaseToProductRelationship {
  releaseId!: string;
  productId!: string;
  name!: string;
  description?: string | undefined;
  release?: Release;
  product?: Product;

  constructor(data?: IReleaseToProductRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseId = _data["releaseId"];
      this.productId = _data["productId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.release = _data["release"] ? Release.fromJS(_data["release"]) : <any>undefined;
      this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseToProductRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseToProductRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseId"] = this.releaseId;
    data["productId"] = this.productId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["release"] = this.release ? this.release.toJSON() : <any>undefined;
    data["product"] = this.product ? this.product.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseToProductRelationship {
  releaseId: string;
  productId: string;
  name: string;
  description?: string | undefined;
  release?: Release;
  product?: Product;
}

export class ReleaseToReleaseGroupRelationship implements IReleaseToReleaseGroupRelationship {
  releaseId!: string;
  releaseGroupId!: string;
  name!: string;
  description?: string | undefined;
  release?: Release;
  releaseGroup?: ReleaseGroup;

  constructor(data?: IReleaseToReleaseGroupRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.releaseId = _data["releaseId"];
      this.releaseGroupId = _data["releaseGroupId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.release = _data["release"] ? Release.fromJS(_data["release"]) : <any>undefined;
      this.releaseGroup = _data["releaseGroup"] ? ReleaseGroup.fromJS(_data["releaseGroup"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseToReleaseGroupRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseToReleaseGroupRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["releaseId"] = this.releaseId;
    data["releaseGroupId"] = this.releaseGroupId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["release"] = this.release ? this.release.toJSON() : <any>undefined;
    data["releaseGroup"] = this.releaseGroup ? this.releaseGroup.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseToReleaseGroupRelationship {
  releaseId: string;
  releaseGroupId: string;
  name: string;
  description?: string | undefined;
  release?: Release;
  releaseGroup?: ReleaseGroup;
}

export class ReleaseTrack implements IReleaseTrack {
  trackNumber!: number;
  mediaNumber!: number;
  releaseId!: string;
  title!: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  internationalStandardRecordingCode?: string | undefined;
  releaseTrackToProductRelationships!: ReleaseTrackToProductRelationship[];
  releaseTrackToWorkRelationships!: ReleaseTrackToWorkRelationship[];
  releaseTrackArtists!: ReleaseTrackArtist[];
  releaseTrackFeaturedArtists!: ReleaseTrackFeaturedArtist[];
  releaseTrackPerformers!: ReleaseTrackPerformer[];
  releaseTrackComposers!: ReleaseTrackComposer[];
  releaseTrackGenres!: ReleaseTrackGenre[];

  constructor(data?: IReleaseTrack) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.releaseTrackToProductRelationships = [];
      this.releaseTrackToWorkRelationships = [];
      this.releaseTrackArtists = [];
      this.releaseTrackFeaturedArtists = [];
      this.releaseTrackPerformers = [];
      this.releaseTrackComposers = [];
      this.releaseTrackGenres = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.trackNumber = _data["trackNumber"];
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.title = _data["title"];
      this.description = _data["description"];
      this.disambiguationText = _data["disambiguationText"];
      this.internationalStandardRecordingCode = _data["internationalStandardRecordingCode"];
      if (Array.isArray(_data["releaseTrackToProductRelationships"])) {
        this.releaseTrackToProductRelationships = [] as any;
        for (let item of _data["releaseTrackToProductRelationships"])
          this.releaseTrackToProductRelationships!.push(ReleaseTrackToProductRelationship.fromJS(item));
      }
      if (Array.isArray(_data["releaseTrackToWorkRelationships"])) {
        this.releaseTrackToWorkRelationships = [] as any;
        for (let item of _data["releaseTrackToWorkRelationships"]) this.releaseTrackToWorkRelationships!.push(ReleaseTrackToWorkRelationship.fromJS(item));
      }
      if (Array.isArray(_data["releaseTrackArtists"])) {
        this.releaseTrackArtists = [] as any;
        for (let item of _data["releaseTrackArtists"]) this.releaseTrackArtists!.push(ReleaseTrackArtist.fromJS(item));
      }
      if (Array.isArray(_data["releaseTrackFeaturedArtists"])) {
        this.releaseTrackFeaturedArtists = [] as any;
        for (let item of _data["releaseTrackFeaturedArtists"]) this.releaseTrackFeaturedArtists!.push(ReleaseTrackFeaturedArtist.fromJS(item));
      }
      if (Array.isArray(_data["releaseTrackPerformers"])) {
        this.releaseTrackPerformers = [] as any;
        for (let item of _data["releaseTrackPerformers"]) this.releaseTrackPerformers!.push(ReleaseTrackPerformer.fromJS(item));
      }
      if (Array.isArray(_data["releaseTrackComposers"])) {
        this.releaseTrackComposers = [] as any;
        for (let item of _data["releaseTrackComposers"]) this.releaseTrackComposers!.push(ReleaseTrackComposer.fromJS(item));
      }
      if (Array.isArray(_data["releaseTrackGenres"])) {
        this.releaseTrackGenres = [] as any;
        for (let item of _data["releaseTrackGenres"]) this.releaseTrackGenres!.push(ReleaseTrackGenre.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ReleaseTrack {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseTrack();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["trackNumber"] = this.trackNumber;
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["title"] = this.title;
    data["description"] = this.description;
    data["disambiguationText"] = this.disambiguationText;
    data["internationalStandardRecordingCode"] = this.internationalStandardRecordingCode;
    if (Array.isArray(this.releaseTrackToProductRelationships)) {
      data["releaseTrackToProductRelationships"] = [];
      for (let item of this.releaseTrackToProductRelationships) data["releaseTrackToProductRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseTrackToWorkRelationships)) {
      data["releaseTrackToWorkRelationships"] = [];
      for (let item of this.releaseTrackToWorkRelationships) data["releaseTrackToWorkRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseTrackArtists)) {
      data["releaseTrackArtists"] = [];
      for (let item of this.releaseTrackArtists) data["releaseTrackArtists"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseTrackFeaturedArtists)) {
      data["releaseTrackFeaturedArtists"] = [];
      for (let item of this.releaseTrackFeaturedArtists) data["releaseTrackFeaturedArtists"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseTrackPerformers)) {
      data["releaseTrackPerformers"] = [];
      for (let item of this.releaseTrackPerformers) data["releaseTrackPerformers"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseTrackComposers)) {
      data["releaseTrackComposers"] = [];
      for (let item of this.releaseTrackComposers) data["releaseTrackComposers"].push(item.toJSON());
    }
    if (Array.isArray(this.releaseTrackGenres)) {
      data["releaseTrackGenres"] = [];
      for (let item of this.releaseTrackGenres) data["releaseTrackGenres"].push(item.toJSON());
    }
    return data;
  }
}

export interface IReleaseTrack {
  trackNumber: number;
  mediaNumber: number;
  releaseId: string;
  title: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  internationalStandardRecordingCode?: string | undefined;
  releaseTrackToProductRelationships: ReleaseTrackToProductRelationship[];
  releaseTrackToWorkRelationships: ReleaseTrackToWorkRelationship[];
  releaseTrackArtists: ReleaseTrackArtist[];
  releaseTrackFeaturedArtists: ReleaseTrackFeaturedArtist[];
  releaseTrackPerformers: ReleaseTrackPerformer[];
  releaseTrackComposers: ReleaseTrackComposer[];
  releaseTrackGenres: ReleaseTrackGenre[];
}

export class ReleaseTrackArtist implements IReleaseTrackArtist {
  trackNumber!: number;
  mediaNumber!: number;
  releaseId!: string;
  artistId!: string;
  releaseTrack?: ReleaseTrack;
  artist?: Artist;

  constructor(data?: IReleaseTrackArtist) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.trackNumber = _data["trackNumber"];
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.artistId = _data["artistId"];
      this.releaseTrack = _data["releaseTrack"] ? ReleaseTrack.fromJS(_data["releaseTrack"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseTrackArtist {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseTrackArtist();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["trackNumber"] = this.trackNumber;
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["artistId"] = this.artistId;
    data["releaseTrack"] = this.releaseTrack ? this.releaseTrack.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseTrackArtist {
  trackNumber: number;
  mediaNumber: number;
  releaseId: string;
  artistId: string;
  releaseTrack?: ReleaseTrack;
  artist?: Artist;
}

export class ReleaseTrackComposer implements IReleaseTrackComposer {
  trackNumber!: number;
  mediaNumber!: number;
  releaseId!: string;
  artistId!: string;
  releaseTrack?: ReleaseTrack;
  artist?: Artist;

  constructor(data?: IReleaseTrackComposer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.trackNumber = _data["trackNumber"];
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.artistId = _data["artistId"];
      this.releaseTrack = _data["releaseTrack"] ? ReleaseTrack.fromJS(_data["releaseTrack"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseTrackComposer {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseTrackComposer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["trackNumber"] = this.trackNumber;
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["artistId"] = this.artistId;
    data["releaseTrack"] = this.releaseTrack ? this.releaseTrack.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseTrackComposer {
  trackNumber: number;
  mediaNumber: number;
  releaseId: string;
  artistId: string;
  releaseTrack?: ReleaseTrack;
  artist?: Artist;
}

export class ReleaseTrackFeaturedArtist implements IReleaseTrackFeaturedArtist {
  trackNumber!: number;
  mediaNumber!: number;
  releaseId!: string;
  artistId!: string;
  releaseTrack?: ReleaseTrack;
  artist?: Artist;

  constructor(data?: IReleaseTrackFeaturedArtist) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.trackNumber = _data["trackNumber"];
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.artistId = _data["artistId"];
      this.releaseTrack = _data["releaseTrack"] ? ReleaseTrack.fromJS(_data["releaseTrack"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseTrackFeaturedArtist {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseTrackFeaturedArtist();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["trackNumber"] = this.trackNumber;
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["artistId"] = this.artistId;
    data["releaseTrack"] = this.releaseTrack ? this.releaseTrack.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseTrackFeaturedArtist {
  trackNumber: number;
  mediaNumber: number;
  releaseId: string;
  artistId: string;
  releaseTrack?: ReleaseTrack;
  artist?: Artist;
}

export class ReleaseTrackGenre implements IReleaseTrackGenre {
  trackNumber!: number;
  mediaNumber!: number;
  releaseId!: string;
  genreId!: string;
  releaseTrack?: ReleaseTrack;
  genre?: Genre;

  constructor(data?: IReleaseTrackGenre) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.trackNumber = _data["trackNumber"];
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.genreId = _data["genreId"];
      this.releaseTrack = _data["releaseTrack"] ? ReleaseTrack.fromJS(_data["releaseTrack"]) : <any>undefined;
      this.genre = _data["genre"] ? Genre.fromJS(_data["genre"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseTrackGenre {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseTrackGenre();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["trackNumber"] = this.trackNumber;
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["genreId"] = this.genreId;
    data["releaseTrack"] = this.releaseTrack ? this.releaseTrack.toJSON() : <any>undefined;
    data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseTrackGenre {
  trackNumber: number;
  mediaNumber: number;
  releaseId: string;
  genreId: string;
  releaseTrack?: ReleaseTrack;
  genre?: Genre;
}

export class ReleaseTrackPerformer implements IReleaseTrackPerformer {
  trackNumber!: number;
  mediaNumber!: number;
  releaseId!: string;
  artistId!: string;
  releaseTrack?: ReleaseTrack;
  artist?: Artist;

  constructor(data?: IReleaseTrackPerformer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.trackNumber = _data["trackNumber"];
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.artistId = _data["artistId"];
      this.releaseTrack = _data["releaseTrack"] ? ReleaseTrack.fromJS(_data["releaseTrack"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseTrackPerformer {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseTrackPerformer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["trackNumber"] = this.trackNumber;
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["artistId"] = this.artistId;
    data["releaseTrack"] = this.releaseTrack ? this.releaseTrack.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseTrackPerformer {
  trackNumber: number;
  mediaNumber: number;
  releaseId: string;
  artistId: string;
  releaseTrack?: ReleaseTrack;
  artist?: Artist;
}

export class ReleaseTrackToProductRelationship implements IReleaseTrackToProductRelationship {
  trackNumber!: number;
  mediaNumber!: number;
  releaseId!: string;
  productId!: string;
  name!: string;
  description?: string | undefined;
  releaseTrack?: ReleaseTrack;
  product?: Product;

  constructor(data?: IReleaseTrackToProductRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.trackNumber = _data["trackNumber"];
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.productId = _data["productId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.releaseTrack = _data["releaseTrack"] ? ReleaseTrack.fromJS(_data["releaseTrack"]) : <any>undefined;
      this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseTrackToProductRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseTrackToProductRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["trackNumber"] = this.trackNumber;
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["productId"] = this.productId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["releaseTrack"] = this.releaseTrack ? this.releaseTrack.toJSON() : <any>undefined;
    data["product"] = this.product ? this.product.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseTrackToProductRelationship {
  trackNumber: number;
  mediaNumber: number;
  releaseId: string;
  productId: string;
  name: string;
  description?: string | undefined;
  releaseTrack?: ReleaseTrack;
  product?: Product;
}

export class ReleaseTrackToWorkRelationship implements IReleaseTrackToWorkRelationship {
  trackNumber!: number;
  mediaNumber!: number;
  releaseId!: string;
  workId!: string;
  name!: string;
  description?: string | undefined;
  releaseTrack?: ReleaseTrack;
  work?: Work;

  constructor(data?: IReleaseTrackToWorkRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.trackNumber = _data["trackNumber"];
      this.mediaNumber = _data["mediaNumber"];
      this.releaseId = _data["releaseId"];
      this.workId = _data["workId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.releaseTrack = _data["releaseTrack"] ? ReleaseTrack.fromJS(_data["releaseTrack"]) : <any>undefined;
      this.work = _data["work"] ? Work.fromJS(_data["work"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ReleaseTrackToWorkRelationship {
    data = typeof data === "object" ? data : {};
    let result = new ReleaseTrackToWorkRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["trackNumber"] = this.trackNumber;
    data["mediaNumber"] = this.mediaNumber;
    data["releaseId"] = this.releaseId;
    data["workId"] = this.workId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["releaseTrack"] = this.releaseTrack ? this.releaseTrack.toJSON() : <any>undefined;
    data["work"] = this.work ? this.work.toJSON() : <any>undefined;
    return data;
  }
}

export interface IReleaseTrackToWorkRelationship {
  trackNumber: number;
  mediaNumber: number;
  releaseId: string;
  workId: string;
  name: string;
  description?: string | undefined;
  releaseTrack?: ReleaseTrack;
  work?: Work;
}

export class Work implements IWork {
  id!: string;
  title!: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  internationalStandardMusicalWorkCode?: string | undefined;
  releasedOn!: Date;
  releasedOnYearOnly!: boolean;
  systemEntity!: boolean;
  enabled!: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  workRelationships!: WorkRelationship[];
  workToProductRelationships!: WorkToProductRelationship[];
  workArtists!: WorkArtist[];
  workFeaturedArtists!: WorkFeaturedArtist[];
  workPerformers!: WorkPerformer[];
  workComposers!: WorkComposer[];
  workGenres!: WorkGenre[];

  constructor(data?: IWork) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.workRelationships = [];
      this.workToProductRelationships = [];
      this.workArtists = [];
      this.workFeaturedArtists = [];
      this.workPerformers = [];
      this.workComposers = [];
      this.workGenres = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.title = _data["title"];
      this.description = _data["description"];
      this.disambiguationText = _data["disambiguationText"];
      this.internationalStandardMusicalWorkCode = _data["internationalStandardMusicalWorkCode"];
      this.releasedOn = _data["releasedOn"] ? new Date(_data["releasedOn"].toString()) : <any>undefined;
      this.releasedOnYearOnly = _data["releasedOnYearOnly"];
      this.systemEntity = _data["systemEntity"];
      this.enabled = _data["enabled"];
      this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
      this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
      if (Array.isArray(_data["workRelationships"])) {
        this.workRelationships = [] as any;
        for (let item of _data["workRelationships"]) this.workRelationships!.push(WorkRelationship.fromJS(item));
      }
      if (Array.isArray(_data["workToProductRelationships"])) {
        this.workToProductRelationships = [] as any;
        for (let item of _data["workToProductRelationships"]) this.workToProductRelationships!.push(WorkToProductRelationship.fromJS(item));
      }
      if (Array.isArray(_data["workArtists"])) {
        this.workArtists = [] as any;
        for (let item of _data["workArtists"]) this.workArtists!.push(WorkArtist.fromJS(item));
      }
      if (Array.isArray(_data["workFeaturedArtists"])) {
        this.workFeaturedArtists = [] as any;
        for (let item of _data["workFeaturedArtists"]) this.workFeaturedArtists!.push(WorkFeaturedArtist.fromJS(item));
      }
      if (Array.isArray(_data["workPerformers"])) {
        this.workPerformers = [] as any;
        for (let item of _data["workPerformers"]) this.workPerformers!.push(WorkPerformer.fromJS(item));
      }
      if (Array.isArray(_data["workComposers"])) {
        this.workComposers = [] as any;
        for (let item of _data["workComposers"]) this.workComposers!.push(WorkComposer.fromJS(item));
      }
      if (Array.isArray(_data["workGenres"])) {
        this.workGenres = [] as any;
        for (let item of _data["workGenres"]) this.workGenres!.push(WorkGenre.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Work {
    data = typeof data === "object" ? data : {};
    let result = new Work();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["title"] = this.title;
    data["description"] = this.description;
    data["disambiguationText"] = this.disambiguationText;
    data["internationalStandardMusicalWorkCode"] = this.internationalStandardMusicalWorkCode;
    data["releasedOn"] = this.releasedOn ? this.releasedOn.toISOString() : <any>undefined;
    data["releasedOnYearOnly"] = this.releasedOnYearOnly;
    data["systemEntity"] = this.systemEntity;
    data["enabled"] = this.enabled;
    data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
    data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
    if (Array.isArray(this.workRelationships)) {
      data["workRelationships"] = [];
      for (let item of this.workRelationships) data["workRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.workToProductRelationships)) {
      data["workToProductRelationships"] = [];
      for (let item of this.workToProductRelationships) data["workToProductRelationships"].push(item.toJSON());
    }
    if (Array.isArray(this.workArtists)) {
      data["workArtists"] = [];
      for (let item of this.workArtists) data["workArtists"].push(item.toJSON());
    }
    if (Array.isArray(this.workFeaturedArtists)) {
      data["workFeaturedArtists"] = [];
      for (let item of this.workFeaturedArtists) data["workFeaturedArtists"].push(item.toJSON());
    }
    if (Array.isArray(this.workPerformers)) {
      data["workPerformers"] = [];
      for (let item of this.workPerformers) data["workPerformers"].push(item.toJSON());
    }
    if (Array.isArray(this.workComposers)) {
      data["workComposers"] = [];
      for (let item of this.workComposers) data["workComposers"].push(item.toJSON());
    }
    if (Array.isArray(this.workGenres)) {
      data["workGenres"] = [];
      for (let item of this.workGenres) data["workGenres"].push(item.toJSON());
    }
    return data;
  }
}

export interface IWork {
  id: string;
  title: string;
  description?: string | undefined;
  disambiguationText?: string | undefined;
  internationalStandardMusicalWorkCode?: string | undefined;
  releasedOn: Date;
  releasedOnYearOnly: boolean;
  systemEntity: boolean;
  enabled: boolean;
  createdOn?: Date;
  updatedOn?: Date;
  workRelationships: WorkRelationship[];
  workToProductRelationships: WorkToProductRelationship[];
  workArtists: WorkArtist[];
  workFeaturedArtists: WorkFeaturedArtist[];
  workPerformers: WorkPerformer[];
  workComposers: WorkComposer[];
  workGenres: WorkGenre[];
}

export class WorkArtist implements IWorkArtist {
  workId!: string;
  artistId!: string;
  work?: Work;
  artist?: Artist;

  constructor(data?: IWorkArtist) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.workId = _data["workId"];
      this.artistId = _data["artistId"];
      this.work = _data["work"] ? Work.fromJS(_data["work"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorkArtist {
    data = typeof data === "object" ? data : {};
    let result = new WorkArtist();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["workId"] = this.workId;
    data["artistId"] = this.artistId;
    data["work"] = this.work ? this.work.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorkArtist {
  workId: string;
  artistId: string;
  work?: Work;
  artist?: Artist;
}

export class WorkComposer implements IWorkComposer {
  workId!: string;
  artistId!: string;
  work?: Work;
  artist?: Artist;

  constructor(data?: IWorkComposer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.workId = _data["workId"];
      this.artistId = _data["artistId"];
      this.work = _data["work"] ? Work.fromJS(_data["work"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorkComposer {
    data = typeof data === "object" ? data : {};
    let result = new WorkComposer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["workId"] = this.workId;
    data["artistId"] = this.artistId;
    data["work"] = this.work ? this.work.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorkComposer {
  workId: string;
  artistId: string;
  work?: Work;
  artist?: Artist;
}

export class WorkFeaturedArtist implements IWorkFeaturedArtist {
  workId!: string;
  artistId!: string;
  work?: Work;
  artist?: Artist;

  constructor(data?: IWorkFeaturedArtist) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.workId = _data["workId"];
      this.artistId = _data["artistId"];
      this.work = _data["work"] ? Work.fromJS(_data["work"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorkFeaturedArtist {
    data = typeof data === "object" ? data : {};
    let result = new WorkFeaturedArtist();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["workId"] = this.workId;
    data["artistId"] = this.artistId;
    data["work"] = this.work ? this.work.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorkFeaturedArtist {
  workId: string;
  artistId: string;
  work?: Work;
  artist?: Artist;
}

export class WorkGenre implements IWorkGenre {
  workId!: string;
  genreId!: string;
  work?: Work;
  genre?: Genre;

  constructor(data?: IWorkGenre) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.workId = _data["workId"];
      this.genreId = _data["genreId"];
      this.work = _data["work"] ? Work.fromJS(_data["work"]) : <any>undefined;
      this.genre = _data["genre"] ? Genre.fromJS(_data["genre"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorkGenre {
    data = typeof data === "object" ? data : {};
    let result = new WorkGenre();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["workId"] = this.workId;
    data["genreId"] = this.genreId;
    data["work"] = this.work ? this.work.toJSON() : <any>undefined;
    data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorkGenre {
  workId: string;
  genreId: string;
  work?: Work;
  genre?: Genre;
}

export class WorkPageResponse implements IWorkPageResponse {
  pageSize!: number;
  pageIndex!: number;
  totalCount!: number;
  items!: Work[];

  constructor(data?: IWorkPageResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.items = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageSize = _data["pageSize"];
      this.pageIndex = _data["pageIndex"];
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(Work.fromJS(item));
      }
    }
  }

  static fromJS(data: any): WorkPageResponse {
    data = typeof data === "object" ? data : {};
    let result = new WorkPageResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["pageSize"] = this.pageSize;
    data["pageIndex"] = this.pageIndex;
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IWorkPageResponse {
  pageSize: number;
  pageIndex: number;
  totalCount: number;
  items: Work[];
}

export class WorkPerformer implements IWorkPerformer {
  workId!: string;
  artistId!: string;
  work?: Work;
  artist?: Artist;

  constructor(data?: IWorkPerformer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.workId = _data["workId"];
      this.artistId = _data["artistId"];
      this.work = _data["work"] ? Work.fromJS(_data["work"]) : <any>undefined;
      this.artist = _data["artist"] ? Artist.fromJS(_data["artist"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorkPerformer {
    data = typeof data === "object" ? data : {};
    let result = new WorkPerformer();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["workId"] = this.workId;
    data["artistId"] = this.artistId;
    data["work"] = this.work ? this.work.toJSON() : <any>undefined;
    data["artist"] = this.artist ? this.artist.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorkPerformer {
  workId: string;
  artistId: string;
  work?: Work;
  artist?: Artist;
}

export class WorkRelationship implements IWorkRelationship {
  workId!: string;
  dependentWorkId!: string;
  name!: string;
  description?: string | undefined;
  work?: Work;
  dependentWork?: Work;

  constructor(data?: IWorkRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.workId = _data["workId"];
      this.dependentWorkId = _data["dependentWorkId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.work = _data["work"] ? Work.fromJS(_data["work"]) : <any>undefined;
      this.dependentWork = _data["dependentWork"] ? Work.fromJS(_data["dependentWork"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorkRelationship {
    data = typeof data === "object" ? data : {};
    let result = new WorkRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["workId"] = this.workId;
    data["dependentWorkId"] = this.dependentWorkId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["work"] = this.work ? this.work.toJSON() : <any>undefined;
    data["dependentWork"] = this.dependentWork ? this.dependentWork.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorkRelationship {
  workId: string;
  dependentWorkId: string;
  name: string;
  description?: string | undefined;
  work?: Work;
  dependentWork?: Work;
}

export class WorkToProductRelationship implements IWorkToProductRelationship {
  workId!: string;
  productId!: string;
  name!: string;
  description?: string | undefined;
  work?: Work;
  product?: Product;

  constructor(data?: IWorkToProductRelationship) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.workId = _data["workId"];
      this.productId = _data["productId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.work = _data["work"] ? Work.fromJS(_data["work"]) : <any>undefined;
      this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorkToProductRelationship {
    data = typeof data === "object" ? data : {};
    let result = new WorkToProductRelationship();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["workId"] = this.workId;
    data["productId"] = this.productId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["work"] = this.work ? this.work.toJSON() : <any>undefined;
    data["product"] = this.product ? this.product.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorkToProductRelationship {
  workId: string;
  productId: string;
  name: string;
  description?: string | undefined;
  work?: Work;
  product?: Product;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any }, result?: any): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
